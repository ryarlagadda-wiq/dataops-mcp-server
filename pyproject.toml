
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dataops-mcp-server"
version = "0.1.0"
description = "A comprehensive MCP server for GCP BigQuery cost optimization, query analysis, and DataOps automation."
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.11,<3.14"
authors = [
    {name = "Rohitha Yarlagadda", email = "rohitha.yarlagadda@quantium.com"},
]
maintainers = [
    {name = "Rohitha Yarlagadda", email = "rohitha.yarlagadda@quantium.com"},
]
keywords = [
    "mcp",
    "bigquery", 
    "gcp",
    "cost-optimization",
    "dataops",
    "sql-optimization",
    "claude",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: Utilities",
]

dependencies = [
    # Core MCP framework
    "mcp>=0.9.0",
    # Google Cloud dependencies
    "google-cloud-bigquery>=3.25.0",
    "google-cloud-core>=2.4.1",
    "google-auth>=2.29.0",
    "google-auth-oauthlib>=1.2.0",
    "google-cloud-monitoring>=2.22.0",
    "google-cloud-logging>=3.11.0",
    # GitHub integration
    "PyGithub>=2.3.0",
    # AI/ML dependencies
    "anthropic>=0.34.0",
    # Data processing and analysis
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    # HTTP clients and async
    "httpx>=0.27.0",
    "aiohttp>=3.9.0",
    "requests>=2.32.4",
    # Date/time handling
    "python-dateutil>=2.9.0",
    # Logging and monitoring
    "structlog>=24.1.0",
    # Configuration and environment
    "pydantic>=2.7.0",
    "pydantic-settings>=2.3.0",
    # Security and validation
    "cryptography>=42.0.0",
    # CLI and utilities
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.12.0",
    "fastapi>=0.116.1",
]

[dependency-groups]
dev = [
    # Testing
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-httpx>=0.30.0",
    "respx>=0.21.0",
    # Code quality
    "ruff>=0.4.0",
    "black>=24.4.0",
    "isort>=5.13.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
    # Development tools
    "ipython>=8.24.0",
    "ipdb>=0.13.0",
    # Type stubs
    "types-requests>=2.32.0",
    "types-python-dateutil>=2.9.0",
]

test = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.0", 
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-httpx>=0.30.0",
    "respx>=0.21.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
]

[project.optional-dependencies]
# Optional integrations
slack = [
    "slack-sdk>=3.27.0",
]

dbt = [
    "dbt-core>=1.8.0",
    "dbt-bigquery>=1.8.0",
]

monitoring = [
    "prometheus-client>=0.20.0",
    "opentelemetry-api>=1.24.0",
    "opentelemetry-sdk>=1.24.0",
]

all = [
    "dataops-mcp-server[slack,dbt,monitoring]",
]

[project.urls]
Homepage = "https://github.com/ryarlagadda-wiq/dataops-mcp-server"
Documentation = "https://github.com/ryarlagadda-wiq/dataops-mcp-server/blob/main/README.md"
Repository = "https://github.com/ryarlagadda-wiq/dataops-mcp-server"
Issues = "https://github.com/ryarlagadda-wiq/dataops-mcp-server/issues"
Changelog = "https://github.com/ryarlagadda-wiq/dataops-mcp-server/blob/main/CHANGELOG.md"

[project.scripts]
dataops-mcp-server = "dataops_mcp_server.main:main"

[tool.hatch.version]
path = "src/version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/dataops-mcp-server"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

# Code quality tools configuration
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "S",   # bandit security
]
ignore = [
    "E501",  # line too long (handled by black)
    "S101",  # use of assert
    "S608",  # possible SQL injection (we handle this properly)
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101", "ARG001", "ARG002"]
"docs/**/*.py" = ["S101", "ARG001"]

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["dataops_mcp_server"]
known_third_party = ["google", "anthropic", "github", "mcp"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "gcp: Tests requiring GCP credentials",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]
